#include <bits/stdc++.h> 
using namespace std; 


#define ll  long long
#define pi pair<ll,ll>p
#define MOD 1000000000+7
#define FOR(i,a,n) for(ll i=a;i<(n);i++)
#define NFOR(i,a,n) for(ll i=n-1;i>=a;i--)
#define twhile ll t; cin>>t; while(t--)
#define nl cout<<"\n";
#define IOP freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define FIO ios_base::sync_with_stdio(false); cin.tie(NULL);
#define ITER(i, a) for(auto i = a.begin(); i != a.end(); i++)
/* ----------------------------------------------------------------------------------------------------*/


void solve() {

    ll n;
    cin>>n;
    ll a[n];ll count[n+1];
    FOR(i,0,n){
      cin>>a[i]; count[i] = 0;
    }
    count[n] =0;
    for(ll i=0; i<n; i++){
      count[a[i]]++;
    }
    vector<ll> problematic;
    vector<ll> safe;
    vector<ll> places;
    for(ll i=0; i<n; i++){
      if(count[i+1]==0 && a[i]==0){
        problematic.push_back(i);
      }
      else if(count[i+1]==0){
        safe.push_back(i);
      }
      else if(a[i]==0){
        places.push_back(i);
      }
    }
    if(problematic.size() == 1){
      a[places[0]] = problematic[0] + 1;
      a[problematic[0]] = safe[0] +1;
      for(ll i=1; i<safe.size(); i++){
        a[places[i]] = safe[i]+1;
      }
    }
    else if(problematic.size()>1){
      for(ll i=0; i<problematic.size() -1; i++){
        a[problematic[i]] = problematic[i+1] +1;
      }
      a[problematic[problematic.size()-1]] = problematic[0]+1;
      for(ll i=0; i<safe.size(); i++){
        a[places[i]] = safe[i]+1;
      }
    }
    else{
      for(ll i=0; i<safe.size(); i++){
        a[places[i]] = safe[i]+1;
      }
    }
    FOR(i,0,n){
      cout<<a[i]<<" ";
    }
    nl

}
/*-----------------------------------------------------------------------------------------------------*/

int main(){
    FIO
    // IOP
    //  twhile
        solve();
    
    return 0;
}



